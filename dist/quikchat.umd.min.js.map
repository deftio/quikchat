{"version":3,"file":"quikchat.umd.min.js","sources":["../src/quikchat.js"],"sourcesContent":["class quikchat {\n    /**\n     * \n     * @param string or DOM element  parentElement \n     * @param {*} meta \n     */\n    constructor(parentElement, onSend = () => { }, options = {}) {\n        const defaultOpts = {\n            theme: 'quikchat-theme-light',\n            trackHistory: true,\n            titleArea: { title: \"Chat\", show: false, align: \"center\" },\n            messagesArea: { alternating: true },\n            inputArea: { show: true },\n            sendOnEnter: true,\n            sendOnShiftEnter: false\n        };\n        const meta = { ...defaultOpts, ...options }; // merge options with defaults\n\n        if (typeof parentElement === 'string') {\n            parentElement = document.querySelector(parentElement);\n        }\n        //console.log(parentElement, meta);\n        this._parentElement = parentElement;\n        this._theme = meta.theme;\n        this._onSend = onSend ? onSend : () => { }; // call back function for onSend\n        this._createWidget();\n        // title area\n        if (meta.titleArea) {\n            this.titleAreaSetContents(meta.titleArea.title, meta.titleArea.align);\n            if (meta.titleArea.show === true) {\n                this.titleAreaShow();\n            } else {\n                this.titleAreaHide();\n            }\n        }\n        // messages area\n        if (meta.messagesArea) {\n            this.messagesAreaAlternateColors(meta.messagesArea.alternating);\n        }\n\n        // input area\n        if (meta.inputArea) {\n            if (meta.inputArea.show === true)\n                this.inputAreaShow();\n            else\n                this.inputAreaHide();\n        }\n        // plumbing\n        this._attachEventListeners();\n        this.trackHistory = meta.trackHistory || true;\n        this._historyLimit = 10000000;\n        this._history = [];\n\n        // send on enter / shift enter\n        this.sendOnEnter = meta.sendOnEnter;\n        this.sendOnShiftEnter = meta.sendOnShiftEnter;\n    }\n\n    _createWidget() {\n        const widgetHTML =\n            `\n            <div class=\"quikchat-base ${this.theme}\">\n                <div class=\"quikchat-title-area\">\n                    <span style=\"font-size: 1.5em; font-weight: 600;\">Title Area</span>\n                </div>\n                <div class=\"quikchat-messages-area\"></div>\n                <div class=\"quikchat-input-area\">\n                    <textarea class=\"quikchat-input-textbox\"></textarea>\n                    <button class=\"quikchat-input-send-btn\">Send</button>\n                </div>\n            </div>\n            `;\n\n        this._parentElement.innerHTML = widgetHTML;\n        this._chatWidget = this._parentElement.querySelector('.quikchat-base');\n        this._titleArea = this._chatWidget.querySelector('.quikchat-title-area');\n        this._messagesArea = this._chatWidget.querySelector('.quikchat-messages-area');\n        this._inputArea = this._chatWidget.querySelector('.quikchat-input-area');\n        this._textEntry = this._inputArea.querySelector('.quikchat-input-textbox');\n        this._sendButton = this._inputArea.querySelector('.quikchat-input-send-btn');\n        this.msgid = 0;\n    }\n\n    /**\n     * Attach event listeners to the widget\n     */\n    _attachEventListeners() {\n        this._sendButton.addEventListener('click', (event) => { event.preventDefault(); this._onSend(this, this._textEntry.value.trim()) });\n        window.addEventListener('resize', () => this._handleContainerResize());\n        this._chatWidget.addEventListener('resize', () => this._handleContainerResize());\n        this._textEntry.addEventListener('keydown', (event) => {\n\n            // Check if Shift + Enter is pressed then we just do carraige\n            if (event.shiftKey && event.keyCode === 13) {\n                // Prevent default behavior (adding new line)\n                if (this.sendOnShiftEnter) {\n                    event.preventDefault();\n                    this._onSend(this, this._textEntry.value.trim());\n                }\n            } else if (event.keyCode === 13) {// Enter but not Shift + Enter\n                if (this.sendOnEnter) {\n                    event.preventDefault();\n                    this._onSend(this, this._textEntry.value.trim());\n                }\n            }\n        });\n\n        this._messagesArea.addEventListener('scroll', () => {\n            const { scrollTop, scrollHeight, clientHeight } = this._messagesArea;\n            this.userScrolledUp = scrollTop + clientHeight < scrollHeight;\n        });\n    }\n\n    // set the onSend function callback.\n    setCallbackOnSend(callback) {\n        this._onSend = callback;\n    }\n    // set a callback for everytime a message is added (listener)\n    setCallbackonMessageAdded(callback) {\n        this._onMessageAdded = callback;\n    }\n\n    // Public methods\n    titleAreaToggle() {\n        this._titleArea.style.display === 'none' ? this.titleAreaShow() : this.titleAreaHide();\n    }\n\n    titleAreaShow() {\n        this._titleArea.style.display = '';\n        this._adjustMessagesAreaHeight();\n    }\n\n    titleAreaHide() {\n        this._titleArea.style.display = 'none';\n        this._adjustMessagesAreaHeight();\n    }\n\n    titleAreaSetContents(title, align = 'center') {\n        this._titleArea.innerHTML = title;\n        this._titleArea.style.textAlign = align;\n    }\n\n    titleAreaGetContents() {\n        return this._titleArea.innerHTML;\n    }\n\n    inputAreaToggle() {\n        this._inputArea.classList.toggle('hidden');\n        this._inputArea.style.display === 'none' ? this.inputAreaShow() : this.inputAreaHide();\n    }\n\n    inputAreaShow() {\n        this._inputArea.style.display = '';\n        this._adjustMessagesAreaHeight();\n    }\n\n    inputAreaHide() {\n        this._inputArea.style.display = 'none';\n        this._adjustMessagesAreaHeight();\n    }\n\n    _adjustMessagesAreaHeight() {\n        const hiddenElements = [...this._chatWidget.children].filter(child => child.classList.contains('hidden'));\n        const totalHiddenHeight = hiddenElements.reduce((sum, child) => sum + child.offsetHeight, 0);\n        const containerHeight = this._chatWidget.offsetHeight;\n        this._messagesArea.style.height = `calc(100% - ${containerHeight - totalHiddenHeight}px)`;\n    }\n\n    _handleContainerResize() {\n        this._adjustMessagesAreaHeight();\n        this._adjustSendButtonWidth();\n        return true;\n    }\n\n    _adjustSendButtonWidth() {\n        const sendButtonText = this._sendButton.textContent.trim();\n        const fontSize = parseFloat(getComputedStyle(this._sendButton).fontSize);\n        const minWidth = fontSize * sendButtonText.length + 16;\n        this._sendButton.style.minWidth = `${minWidth}px`;\n        return true;\n    }\n\n    //messagesArea functions\n    messagesAreaAlternateColors(alt = true) {\n        if (alt) {\n            this._messagesArea.classList.add('quikchat-messages-area-alt');\n        }\n        else {\n            this._messagesArea.classList.remove('quikchat-messages-area-alt');\n        }\n        return alt === true;\n    }\n    messagesAreaAlternateColorsToggle() {\n        this._messagesArea.classList.toggle('quikchat-messages-area-alt');\n    }\n    messagesAreaAlternateColorsGet() {\n        return this._messagesArea.classList.contains('quikchat-messages-area-alt');\n    }\n    // message functions\n    messageAddFull(input = { content: \"\", userString: \"user\", align: \"right\", role: \"user\", userID: -1, timestamp: false, updatedtime: false, scrollIntoView: true, visible: true }) {\n        const msgid = this.msgid;\n        const messageDiv = document.createElement('div');\n        const msgidClass = 'quikchat-msgid-' + String(msgid).padStart(10, '0');\n        const userIdClass = 'quikchat-userid-' + String(input.userString).padStart(10, '0'); // hash this..\n        messageDiv.classList.add('quikchat-message', msgidClass, 'quikchat-structure');\n        this.msgid++;\n\n        const userDiv = document.createElement('div');\n        userDiv.innerHTML = input.userString;\n        userDiv.classList.add('quikchat-user-label');\n        userDiv.style.textAlign = input.align;\n    \n        const contentDiv = document.createElement('div');\n        contentDiv.classList.add('quikchat-message-content');\n    \n        // Determine text alignment for right-aligned messages\n        if (input.align === \"right\") {\n            const isMultiLine = input.content.includes(\"\\n\");\n            const isLong = input.content.length > 50; // Adjust length threshold\n    \n            if (isMultiLine || isLong) {\n                contentDiv.classList.add(\"quikchat-right-multiline\");\n            } else {\n                contentDiv.classList.add(\"quikchat-right-singleline\");\n            }\n        }\n    \n        contentDiv.innerHTML = input.content;\n    \n        messageDiv.appendChild(userDiv);\n        messageDiv.appendChild(contentDiv);\n        this._messagesArea.appendChild(messageDiv);\n        \n        const visible = input.visible === undefined ? true : input.visible;\n        if (!visible) {\n            messageDiv.style.display = 'none';\n        }\n    \n        // Scroll to the last message only if the user is not actively scrolling up\n        if ((!this.userScrolledUp) || input.scrollIntoView) {\n            this.messageScrollToBottom();\n        }\n    \n        this._textEntry.value = '';\n        this._adjustMessagesAreaHeight();\n        this._handleShortLongMessageCSS(messageDiv, input.align); // Handle CSS for short/long messages\n        this._updateMessageStyles();\n    \n        // Add timestamp now, unless it is passed in \n        const timestamp = input.timestamp ? input.timestamp : new Date().toISOString();\n        const updatedtime = input.updatedtime ? input.updatedtime : timestamp;\n    \n        if (this.trackHistory) {\n            this._history.push({ msgid, ...input, visible, timestamp, updatedtime, messageDiv });\n            if (this._history.length > this._historyLimit) {\n                this._history.shift();\n            }\n        }\n    \n        if (this._onMessageAdded) {\n            this._onMessageAdded(this, msgid);\n        }\n    \n        return msgid;\n    }\n    \n\n\n    messageAddNew(content = \"\", userString = \"user\", align = \"right\", role = \"user\", scrollIntoView = true, visible = true) {\n        let retvalue = this.messageAddFull(\n            { content: content, userString: userString, align: align, role: role, scrollIntoView: scrollIntoView, visible: visible }\n        );\n        // this.messageScrollToBottom();\n        return retvalue;\n    }\n\n    messageRemove(n) {\n        // use css selector to remove the message\n        let sucess = false;\n        try {\n            this._messagesArea.removeChild(this._messagesArea.querySelector(`.quikchat-msgid-${String(n).padStart(10, '0')}`));\n            sucess = true;\n        }\n        catch (error) {\n            console.log(`{String(n)} : Message ID not found`);\n        }\n        if (sucess) {\n            // slow way to remove from history\n            //this._history = this._history.filter((item) => item.msgid !== n); // todo make this more efficient\n\n            // better way to delete this from history\n            this._history.splice(this._history.findIndex((item) => item.msgid === n), 1);\n        }\n        return sucess;\n    }\n    /* returns the message html object from the DOM\n    */\n    messageGetDOMObject(n) {\n        let msg = null;\n        // now use css selector to get the message \n        try {\n            msg = this._messagesArea.querySelector(`.quikchat-msgid-${String(n).padStart(10, '0')}`);\n        }\n        catch (error) {\n            console.log(`{String(n)} : Message ID not found`);\n        }\n        return msg;\n    }\n    /* returns the message content only\n    */\n    messageGetContent(n) {\n        let content = \"\"\n        // now use css selector to get the message \n        try {\n            // get from history..\n            content = this._history.filter((item) => item.msgid === n)[0].content;\n            //content =  this._messagesArea.querySelector(`.quikchat-msgid-${String(n).padStart(10, '0')}`).lastChild.textContent;\n        }\n        catch (error) {\n            console.log(`{String(n)} : Message ID not found`);\n        }\n        return content;\n    }\n\n    /* returns the DOM Content element of a given message\n    */\n    messageGetContentDOMElement(n) {\n        let contentElement = null;\n        // now use css selector to get the message\n        try {\n            //contentElement = this._messagesArea.querySelector(`.quikchat-msgid-${String(n).padStart(10, '0')}`).lastChild;\n            contentElement = this._history.filter((item) => item.msgid === n)[0].messageDiv.lastChild;\n        }\n        catch (error) {\n            console.log(`{String(n)} : Message ID not found`);\n        }\n        return contentElement;\n    }\n\n    /* append message to the message content\n    */\n\n    messageAppendContent(n, content) {\n        let success = false;\n        try {\n            this._messagesArea.querySelector(`.quikchat-msgid-${String(n).padStart(10, '0')}`).lastChild.innerHTML += content;\n            // update history\n            let item = this._history.filter((item) => item.msgid === n)[0];\n            item.content += content;\n            item.updatedtime = new Date().toISOString();\n            success = true;\n\n            // Scroll to the last message only if the user is not actively scrolling up\n            if (!this.userScrolledUp) {\n                this._messagesArea.lastElementChild.scrollIntoView();\n            }\n        } catch (error) {\n            console.log(`${String(n)} : Message ID not found`);\n        }\n        return success;\n    }\n\n    /* replace message content\n    */\n    messageReplaceContent(n, content) {\n        let success = false;\n        try {\n            this._messagesArea.querySelector(`.quikchat-msgid-${String(n).padStart(10, '0')}`).lastChild.innerHTML = content;\n            // update history\n            let item = this._history.filter((item) => item.msgid === n)[0];\n            item.content = content;\n            item.updatedtime = new Date().toISOString();\n            success = true;\n\n            // Scroll to the last message only if the user is not actively scrolling up\n            if (!this.userScrolledUp) {\n                this._messagesArea.lastElementChild.scrollIntoView();\n            }\n        } catch (error) {\n            console.log(`${String(n)} : Message ID not found`);\n        }\n        return success;\n    }\n\n    /**\n     * Scrolls the messages area to the bottom.\n     */\n    messageScrollToBottom() {\n        if (this._messagesArea.lastElementChild) {\n            this._messagesArea.lastElementChild.scrollIntoView();\n        }\n    }\n\n    /**\n     * Removes the last message from the messages area.\n     */\n    messageRemoveLast() {\n        // find the last message by id:\n        if (this._history.length >= 0) {\n            let lastMsgId = this._history[this._history.length - 1].msgid;\n            return this.messageRemove(lastMsgId);\n        }\n        return false;\n    }\n\n    messageSetVisibility(msgid, isVisible) {\n        const message = this._history.find(item => item.msgid === msgid);\n        if (message && message.messageDiv) {\n            message.messageDiv.style.display = isVisible ? '' : 'none';\n            message.visible = isVisible;\n            this._updateMessageStyles();\n            return true;\n        }\n        return false;\n    }\n\n    messageGetVisibility(msgid) {\n        const message = this._history.find(item => item.msgid === msgid);\n        if (message && message.messageDiv) {\n            return message.messageDiv.style.display !== 'none';\n        }\n        return false; // Return false if not found or no messageDiv\n    }\n\n    _updateMessageStyles() {\n        const visibleMessages = [...this._messagesArea.children].filter(\n            child => child.style.display !== 'none'\n        );\n\n        visibleMessages.forEach((messageDiv, index) => {\n            messageDiv.classList.remove('quikchat-message-1', 'quikchat-message-2');\n            messageDiv.classList.add(index % 2 === 0 ? 'quikchat-message-1' : 'quikchat-message-2');\n        });\n    }\n\n    /**\n     * For right sided or centered messages, we need to handle the CSS for short and long messages.\n     * for short messages we use simple justifying, for long messages we need to wrap and perform multiline\n     * formatting. \n     * \n     * @param {*} messageElement \n     * @returns nothing\n     */\n    _handleShortLongMessageCSS(messageElement, align) {\n        // console.log(messageElement);\n        // Reset classes\n        messageElement.classList.remove(\n            'left-singleline', 'left-multiline',\n            'center-singleline', 'center-multiline',\n            'right-singleline', 'right-multiline');\n        let contentDiv = messageElement.lastChild;\n        window.lastDiv = contentDiv; // for debugging   \n        // Determine if the message is short or long\n\n        const computedStyle = window.getComputedStyle(contentDiv);\n\n        // Get the element's height\n        const elementHeight = contentDiv.offsetHeight;\n\n        // Calculate or estimate line height\n        let lineHeight;\n        if (computedStyle.lineHeight === \"normal\") {\n            const fontSize = parseFloat(computedStyle.fontSize);\n            lineHeight = fontSize * 1.2; // approximate \"normal\" as 1.2 times font-size\n        } else {\n            lineHeight = parseFloat(computedStyle.lineHeight);\n        }\n\n        // Check if the element height is more than one line-height\n        const isMultiLine = elementHeight > lineHeight;\n\n        // Using scrollHeight and clientHeight to check for overflow (multi-line)\n        switch (align) {\n            case 'center':\n                if (isMultiLine) {\n                    messageElement.classList.add('center-multiline');\n                }\n                else {\n                    messageElement.classList.add('center-singleline');\n                }\n                break;\n            case 'right':\n                if (isMultiLine) {\n                    messageElement.classList.add('right-multiline');\n                }\n                else {\n                    messageElement.classList.add('right-singleline');\n                }\n                break;\n            case 'left':\n            default:\n                if (isMultiLine) {\n                    messageElement.classList.add('left-multiline');\n                }\n                else {\n                    messageElement.classList.add('left-singleline');\n                }\n                break;\n        }\n\n    }\n    // history functions\n    /**\n     * \n     * @param {*} n \n     * @param {*} m \n     * @returns array of history messages\n     */\n    historyGet(n, m) {\n\n        if (n == undefined) {\n            n = 0;\n            m = this._history.length;\n        }\n        if (m === undefined) {\n            m = n < 0 ? m : n + 1;\n        }\n        // remember that entries could be deleted.  TODO: So we need to return the actual history entries\n        // so now we need to find the array index that correspondes to messageIds n (start) and m (end)\n\n        return this._history.slice(n, m);\n    }\n\n    historyGetAllCopy() {\n        return this._history.slice();\n    }\n\n    historyClear() {\n        this.msgid = 0;\n        this._messagesArea.innerHTML = \"\";\n        this._history = [];\n    }\n\n    historyGetLength() {\n        return this._history.length;\n    }\n\n    historyGetMessage(n) {\n        if (n >= 0 && n < this._history.length) {\n            return this._history[n];\n        }\n        return {};\n\n    }\n\n    historyGetMessageContent(n) {\n        if (n >= 0 && n < this._history.length)\n            return this._history[n].content;\n        else\n            return \"\";\n    }\n\n    // expects an array of messages to be in the format of the history object\n    historyRestoreAll(messageList) {\n        // clear all messages and history\n        this.historyClear();\n\n        // clear the messages div \n        this._messagesArea.innerHTML = \"\";\n\n        // add all messages\n        messageList.forEach((message) => {\n            this.messageAddFull(message);\n        });\n    }\n    /**\n     * \n     * @param {string} newTheme \n     */\n    changeTheme(newTheme) {\n        this._chatWidget.classList.remove(this._theme);\n        this._chatWidget.classList.add(newTheme);\n        this._theme = newTheme;\n    }\n\n    /**\n     *  Get the current theme\n     * @returns {string} - The current theme\n     */\n    get theme() {\n        return this._theme;\n    }\n\n    /**\n     * \n     * @returns {object} - Returns the version and license information for the library.\n     */\n    static version() {\n        return { \"version\": \"1.1.13\", \"license\": \"BSD-2\", \"url\": \"https://github/deftio/quikchat\", \"fun\": true };\n    }\n\n    /**\n     * quikchat.loremIpsum() - Generate a simple string of Lorem Ipsum text (sample typographer's text) of numChars in length.\n     * borrowed from github.com/deftio/bitwrench.js\n     * @param {number} numChars - The number of characters to generate (random btw 25 and 150 if undefined).    \n     * @param {number} [startSpot=0] - The starting index in the Lorem Ipsum text. If undefined, a random startSpot will be generated.\n     * @param {boolean} [startWithCapitalLetter=true] - If true, capitalize the first character or inject a capital letter if the first character isn't a capital letter.\n     * \n     * @returns {string} A string of Lorem Ipsum text.\n     * \n     * @example \n     * // Returns 200 characters of Lorem Ipsum starting from index 50\n     * loremIpsum(200, 50);\n     * \n     * @example \n     * //Returns a 200 Lorem Ipsum characters starting from a random index\n     * loremIpsum(200);\n     */\n\n    static loremIpsum(numChars, startSpot = undefined, startWithCapitalLetter = true) {\n        const loremText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \";\n\n        if (typeof numChars !== \"number\") {\n            numChars = Math.floor(Math.random() * (150)) + 25;\n        }\n\n        if (startSpot === undefined) {\n            startSpot = Math.floor(Math.random() * loremText.length);\n        }\n\n        startSpot = startSpot % loremText.length;\n\n        // Move startSpot to the next non-whitespace and non-punctuation character\n        while (loremText[startSpot] === ' ' || /[.,:;!?]/.test(loremText[startSpot])) {\n            startSpot = (startSpot + 1) % loremText.length;\n        }\n\n        let l = loremText.substring(startSpot) + loremText.substring(0, startSpot);\n\n        if (typeof numChars !== \"number\") {\n            numChars = l.length;\n        }\n\n        let s = \"\";\n        while (numChars > 0) {\n            s += numChars < l.length ? l.substring(0, numChars) : l;\n            numChars -= l.length;\n        }\n\n        if (s[s.length - 1] === \" \") {\n            s = s.substring(0, s.length - 1) + \".\"; // always end on non-whitespace. \".\" was chosen arbitrarily.\n        }\n\n        if (startWithCapitalLetter) {\n            let c = s[0].toUpperCase();\n            c = /[A-Z]/.test(c) ? c : \"M\";\n            s = c + s.substring(1);\n        }\n\n        return s;\n    };\n\n    static tempMessageGenerator (domElement, content, interval, cb = null) {\n        interval = Math.max(interval, 100); // Ensure at least 100ms interval\n    \n        let count = 0;\n\n        let defaultCB = (msg, count) => {msg += \".\"; return msg; };\n\n        if (cb && typeof cb !== 'function') {\n            cb = null;\n        }\n\n        cb = cb || defaultCB;\n        \n        // if its a string, then get the element (css sel) or its an DOM element already \n        let el  = domElement;\n        if (typeof el === 'string') {\n            el = document.querySelector(el);\n        } \n\n        const element = el;\n\n    \n        // Ensure the element exists\n        if (!element) return;\n    \n        element.innerHTML = content;\n        let currentMsg = content;\n    \n        const intervalId = setInterval(() => {\n            if (element.innerHTML !== currentMsg) {\n                clearInterval(intervalId); // Stop updating if content is changed externally\n                return;\n            }\n            \n            currentMsg = String( cb(currentMsg, count)) ;// Use callback return value if provided\n            \n            count++;\n            element.innerHTML = currentMsg;\n        }, interval);\n    }\n\n    static createTempMessageDOMStr(initialContent, updateInterval = 1000, callback = null, options = {}) {\n        // Make sure the interval is at least 100ms\n        updateInterval = Math.max(updateInterval, 100);\n        \n        // Validate callback; if not a function, ignore it.\n        if (callback && typeof callback !== 'function') {\n          callback = null;\n        }\n        // Default callback simply appends a dot.\n        callback = callback || function(msg, count) {\n          return msg + \".\";\n        };\n      \n        // Allow an optional CSS class for the container element\n        const containerClass = options.containerClass ? options.containerClass : '';\n      \n        // Generate a unique id so that the inline script can reliably find the container.\n        const uniqueId = \"tempMsg_\" + Date.now() + \"_\" + Math.floor(Math.random() * 1000000);\n      \n        // Build and return the HTML string.\n        // Note the use of <\\/script> (with a backslash) so that the inline script is not terminated early.\n        return `\n          <span id=\"${uniqueId}\" ${containerClass ? `class=\"${containerClass}\"` : ''}>\n            ${initialContent}\n          </span>\n          <script>\n            (function(){\n              // Get our container element by its unique id.\n              var container = document.getElementById(\"${uniqueId}\");\n              if (!container) return;\n              var count = 0;\n              var currentMsg = container.innerHTML;\n              var interval = ${updateInterval};\n              // Convert the callback function into its string representation.\n              var cb = ${callback.toString()};\n              var intervalId = setInterval(function(){\n                // If the content has been replaced, stop updating.\n                if(container.innerHTML !== currentMsg){\n                  clearInterval(intervalId);\n                  return;\n                }\n                // Use the callback to generate the new message.\n                currentMsg = String(cb(currentMsg, count));\n                count++;\n                container.innerHTML = currentMsg;\n              }, interval);\n            })();\n          <\\/script>\n        `;\n      }\n      \n\n}\n\nexport default quikchat;\n"],"names":["quikchat","parentElement","onSend","arguments","length","undefined","options","_classCallCheck","meta","_objectSpread","defaultOpts","theme","trackHistory","titleArea","title","show","align","messagesArea","alternating","inputArea","sendOnEnter","sendOnShiftEnter","document","querySelector","this","_parentElement","_theme","_onSend","_createWidget","titleAreaSetContents","titleAreaShow","titleAreaHide","messagesAreaAlternateColors","inputAreaShow","inputAreaHide","_attachEventListeners","_historyLimit","_history","key","value","widgetHTML","concat","innerHTML","_chatWidget","_titleArea","_messagesArea","_inputArea","_textEntry","_sendButton","msgid","_this","addEventListener","event","preventDefault","trim","window","_handleContainerResize","shiftKey","keyCode","_this$_messagesArea","scrollTop","scrollHeight","clientHeight","userScrolledUp","callback","_onMessageAdded","style","display","_adjustMessagesAreaHeight","textAlign","classList","toggle","totalHiddenHeight","_toConsumableArray","children","filter","child","contains","reduce","sum","offsetHeight","containerHeight","height","_adjustSendButtonWidth","sendButtonText","textContent","minWidth","parseFloat","getComputedStyle","fontSize","alt","add","remove","input","content","userString","role","userID","timestamp","updatedtime","scrollIntoView","visible","messageDiv","createElement","msgidClass","String","padStart","userDiv","contentDiv","isMultiLine","includes","isLong","appendChild","messageScrollToBottom","_handleShortLongMessageCSS","_updateMessageStyles","Date","toISOString","push","shift","messageAddFull","n","sucess","removeChild","error","console","log","splice","findIndex","item","msg","contentElement","lastChild","success","lastElementChild","lastMsgId","messageRemove","isVisible","message","find","forEach","index","messageElement","lastDiv","lineHeight","computedStyle","elementHeight","m","slice","messageList","_this2","historyClear","newTheme","get","version","license","url","fun","numChars","startSpot","startWithCapitalLetter","loremText","Math","floor","random","test","l","substring","s","c","toUpperCase","domElement","interval","cb","max","count","el","element","currentMsg","intervalId","setInterval","clearInterval","initialContent","updateInterval","containerClass","uniqueId","now","toString"],"mappings":"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"}